	reg [1:0] 											mau_state_r;
	reg [1:0] 											mau_state_next;
	reg [`CORE_ADDR_WIDTH-1:0]			mau_req_addr_r;

	localparam MAU_IDLE  = 2'b00;
	localparam MAU_EVICT = 2'b01;
	localparam MAU_REQ   = 2'b10;

	// -----------------------------------------------------
	// MAU
	// -----------------------------------------------------
	
	always_ff @(posedge clk or negedge rst_n) begin
		if(~rst_n) begin
			mau_state_r    <= MAU_IDLE;
		end else begin
			mau_state_r    <= mau_state_next;
		end
	end

	always_ff @(posedge clk) begin
		if(mau_state_r == MAU_IDLE) begin
			if(lru_evict_val)	mau_req_addr_r <= {ld_rd_tag[lru_way_pos], core_req_idx, {`CORE_OFFSET_WIDTH{1'b0}}};
			else mau_req_addr_r <= {core_req_tag, core_req_idx, {`CORE_OFFSET_WIDTH{1'b0}}};
		end
	end

	assign mau_req_val     = core_req_val & ~lru_hit;
	assign mau_req_ev_data = dm_rdata[lru_way_pos];

	always @* begin
		case(mau_state_r)
			MAU_IDLE: begin
				if(mau_req_val) begin
					if(lru_evict_val) begin
						mau_state_next = MAU_EVICT;
						mau_req_addr  = {ld_rd_tag[lru_way_pos], core_req_idx, {`CORE_OFFSET_WIDTH{1'b0}}};
						mau_req_ev    = 1'b1;
					end
					else begin 
						mau_state_next = MAU_REQ;
						mau_req_addr   = {core_req_tag, core_req_idx, {`CORE_OFFSET_WIDTH{1'b0}}};
						mau_req_ev     = 1'b0;
					end
				end
				else begin
					mau_state_next = MAU_IDLE;
					mau_req_addr   = {core_req_tag, core_req_idx, {`CORE_OFFSET_WIDTH{1'b0}}};
					mau_req_ev     = 1'b0;
				end
			end
			MAU_REQ: begin
				mau_req_addr   = {core_req_tag, core_req_idx, {`CORE_OFFSET_WIDTH{1'b0}}};
				mau_req_ev     = 1'b0;
				if(mau_req_ack) mau_state_next = MAU_IDLE;
				else mau_state_next = MAU_REQ;
			end
			MAU_EVICT: begin
				mau_req_addr  = mau_req_addr_r;
				mau_req_ev    = 1'b1;
				if(mau_req_ack) mau_state_next = MAU_REQ;
				else mau_state_next = MAU_EVICT;
			end
		endcase
	end
